
/*
=========================
        VARIAVEIS
=========================

Uma vari√°vel √© um espa√ßo na mem√≥ria do computador onde voc√™ pode **armazenar informa√ß√µes**. Essa informa√ß√£o pode ser:

- Um n√∫mero üßÆ
- Uma palavra ou frase üìú
- Uma lista üìã
- Ou at√© mesmo algo mais complexo, como objetos e fun√ß√µes!

Declarando uma vari√°vel com let
let nome = "Jo√£o"; // Voc√™ pode mudar o valor depois

Declarando uma vari√°vel com const
const idade = 25; // O valor n√£o pode ser alterado

Declarando uma vari√°vel com var (n√£o recomendado, mas funciona)
var cidade = "S√£o Paulo";


No JavaScript, as vari√°veis podem armazenar diferentes tipos de dados. Vamos ver os principais:
N√∫mero (number):
let idade = 30;

Texto (string):
let nome = "Maria";

Booleano (boolean):
let estaLogado = true; // ou false

Lista (Array):
let frutas = ["Ma√ß√£", "Banana", "Laranja"];

Objeto:
let pessoa = {
  nome: "Carlos",
  idade: 28
};


1. var: O "Velho" JavaScript
Declarada antes do ES6, var foi a √∫nica maneira de criar vari√°veis por muito tempo.
Escopo: Global ou local dentro de fun√ß√µes. Ignora blocos (if, for, etc.).
Reatribui√ß√£o: Pode ser reatribu√≠da e redeclarada no mesmo escopo.

if (true) {
  var nome = "Pedro";
}
console.log(nome); // Funciona, mesmo fora do bloco


‚ö†Ô∏è Problemas com `var`:
‚ö†Ô∏è Como ignora blocos, pode causar comportamentos inesperados, especialmente em loops.

2. let: O "Atualizado"
Introduzido no ES6, √© recomendado para vari√°veis cujo valor pode mudar.
Escopo: Local ao bloco onde foi declarada.
Reatribui√ß√£o: Pode ser reatribu√≠da, mas n√£o redeclarada no mesmo escopo.

if (true) {
  let idade = 25;
  console.log(idade); // Funciona aqui
}
console.log(idade); // Erro: idade n√£o est√° definida


3. `const`: O "Imut√°vel"**

- Tamb√©m introduzido no ES6, √© usado para vari√°veis que **n√£o mudam de valor**.
- **Escopo:** Local ao bloco onde foi declarada.
- **Reatribui√ß√£o:** N√£o pode ser reatribu√≠da, mas se for um objeto ou array, seus valores internos podem ser alterados.

const PI = 3.14;

Para objetos e arrays:

const frutas = ["Ma√ß√£", "Banana"];
frutas.push("Laranja"); // Funciona


### **üí° Quando Usar Cada Um?**

let`:** Quando voc√™ precisa de uma vari√°vel cujo valor ser√° alterado.
const`:** Para valores constantes ou estruturas que n√£o ser√£o reatribu√≠das.
‚ö†Ô∏è var`:** Evite, a menos que precise de compatibilidade com c√≥digos antigos. ‚ö†Ô∏è

*/

// Exerc√≠cios
// 1 - Crie uma vari√°vel para armazenar seu nome e outra para sua idade. Imprima uma frase como: "Meu nome √© [nome] e tenho [idade] anos".

let nome = "Zmax";
let idade = "34";

console.log('Meu nome √© ' + nome + ' e minha idade √© '+ idade + ' anos.')

// 2-  Declare uma vari√°vel para armazenar o pre√ßo de um produto e outra para o desconto. Calcule o pre√ßo final e mostre no console.

let preco = 30;
let desconto = 10;
let precoFinal = preco - desconto

console.log('O pre√ßo final do produto √©: ' + precoFinal + ' reais')


// 3 - Crie um array com tr√™s de suas comidas favoritas e exiba a segunda comida na lista.

const comidas = ['pizza', 'cachorro quente']; //come√ßa sempre em 0 e √© sempre feito com []

console.log(comidas)
console.log(comidas[1])


// 4 - Crie um objeto que represente um livro, com propriedades como `titulo`, `autor` e `ano`. Mostre no console o t√≠tulo e o autor.

const livro = { 
  titulo: 'meu livro', 
  autor: 'Zmax',
  ano: 2025
}; // sempre feito com {} e os objetos declarados diretamente seguido de ":" e ao final com "," - strings com aspas e numeros escritos diretamente
console.log(livro)

// 5 - Declare uma vari√°vel `estaLogado` com o valor `false`. Depois, mude o valor para `true` e imprima a mensagem: "Status de login: [valor da vari√°vel]".

let estaLogado = true

console.log("Status de login: ", estaLogado)

// 6 - Crie uma vari√°vel constante chamada `PI` com o valor `3.14`. Use-a para calcular a √°rea de um c√≠rculo com raio 5 e mostre o resultado.

const PI = 3.14
let raio = 5

console.log(PI*raio**2)



