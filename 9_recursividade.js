/*
=========================
       RECURSÃƒO
=========================

A recursÃ£o ocorre quando uma funÃ§Ã£o se chama a si mesma para resolver um problema maior, 
dividindo-o em partes menores e mais simples. Ela Ã© amplamente utilizada em algoritmos, 
desde cÃ¡lculos matemÃ¡ticos complexos atÃ© a navegaÃ§Ã£o em estruturas de dados, como Ã¡rvores.


ğŸ“ŒğŸ“Œ O Que Ã© RecursÃ£o? ğŸ“ŒğŸ“Œ

A recursÃ£o Ã© uma tÃ©cnica onde uma funÃ§Ã£o se chama repetidamente atÃ© atingir uma condiÃ§Ã£o que interrompa essa chamada.

ğŸ’¡ **Exemplo no mundo real:**

- Uma boneca russa: Cada boneca contÃ©m outra menor atÃ© que a menor de todas seja encontrada.
- Subir uma escada: Cada passo Ã© uma "chamada" atÃ© que vocÃª alcance o topo.


ğŸ’¡ 
=======================
Estrutura da RecursÃ£o
=======================

O caso base Ã© a condiÃ§Ã£o que encerra a recursÃ£o. Sem ele, a funÃ§Ã£o entraria em um loop infinito.
Chamada Recursiva:

A chamada onde a funÃ§Ã£o se chama novamente com um valor atualizado, movendo-se em direÃ§Ã£o ao caso base.

Exemplo:

function somaAte(numero) {
  if (numero === 1) return 1; // Caso base
  return numero + somaAte(numero - 1); // Chamada recursiva
}

console.log(somaAte(5)); // SaÃ­da: 15 (5 + 4 + 3 + 2 + 1)

â€‹
=============================================
Como a RecursÃ£o Funciona? (Pilha de Chamadas)
=============================================
A recursÃ£o utiliza uma estrutura chamada **pilha de chamadas**. Cada vez que a funÃ§Ã£o Ã© chamada, ela Ã© adicionada Ã  pilha. Quando o caso base Ã© atingido, as chamadas comeÃ§am a ser resolvidas em ordem inversa.

ğŸ’¡ **Visualizando a pilha:**

Para o exemplo `somaAte(5)`:

1. `somaAte(5)` chama `somaAte(4)`.
2. `somaAte(4)` chama `somaAte(3)`.
3. ... atÃ© `somaAte(1)`, que retorna `1`.
4. As chamadas comeÃ§am a ser resolvidas: `1 + 2 + 3 + 4 + 5`.


ğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“Œ
Exemplos Comuns de RecursÃ£o
ğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“ŒğŸ“Œ


ğŸ”¥ğŸ”¥ Fatorial de um NÃºmero:ğŸ”¥ğŸ”¥


function fatorial(n) {
  if (n === 0) return 1; // Caso base
  return n * fatorial(n - 1); // Chamada recursiva
}

console.log(fatorial(5)); // SaÃ­da: 120 (5 * 4 * 3 * 2 * 1)



ğŸ”¥ğŸ”¥ SequÃªncia de Fibonacci: ğŸ”¥ğŸ”¥


function fibonacci(n) {
  if (n <= 1) return n; // Caso base
  return fibonacci(n - 1) + fibonacci(n - 2); // Chamada recursiva
}

console.log(fibonacci(6)); // SaÃ­da: 8 (0, 1, 1, 2, 3, 5, 8)



================================
ğŸ’¡ğŸ’¡ğŸ’¡ Cuidados com a RecursÃ£o ğŸ’¡ğŸ’¡ğŸ’¡
================================

1. **Garanta o Caso Base:**
    
    Sempre defina uma condiÃ§Ã£o para terminar a recursÃ£o, ou vocÃª pode causar um **estouro de pilha**.
    
2. **Evite RecursÃµes Profundas:**
    
    Se o problema envolver muitas chamadas, prefira usar um loop para evitar problemas de desempenho.
    
3. **Compare com IteraÃ§Ã£o:**
    
    Nem todo problema precisa de recursÃ£o. Compare a eficiÃªncia da recursÃ£o com um loop antes de escolher.


*/



// 1. Escreva uma funÃ§Ã£o recursiva que conte de `n` atÃ© 0.

function ateZero(num) {
    if (num === 0) { //ponto de parada
        console.log("Chegou ao 0!") //fim
        return // interrompe o loop atÃ© o ponto de parada
    };
    
    console.log(`Contando: ${num}`);

    ateZero(num - 1); // chamada de recursÃ£o
}

ateZero(4);


// 2. Implemente uma funÃ§Ã£o que calcule o fatorial de um nÃºmero.

let num1 = 5

function fatorial(num1) {
    if (num1 === 0) {        
        return 1
    }; 
    return num1*fatorial(num1-1);
}

console.log(`O fatorial de ${num1} Ã© ${fatorial(num1)}`);


// 3. Crie uma funÃ§Ã£o que some todos os nÃºmeros de um array usando recursÃ£o.




// 4. Escreva uma funÃ§Ã£o para verificar se uma palavra Ã© um palÃ­ndromo usando recursÃ£o.




// 5. Implemente uma funÃ§Ã£o que calcule o n-Ã©simo termo da sequÃªncia de Fibonacci.




// 6. Crie uma funÃ§Ã£o que liste todos os arquivos de um diretÃ³rio usando recursÃ£o.