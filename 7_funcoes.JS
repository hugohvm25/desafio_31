/*
=========================
       FUN√á√ïES
=========================

O Que √© uma Fun√ß√£o?


Uma **fun√ß√£o** √© um bloco de c√≥digo que realiza uma tarefa espec√≠fica. Voc√™ pode pensar nela como um **mini-programa** dentro do seu programa principal.

üí° **Exemplo no mundo real:**

- Uma fun√ß√£o para calcular a soma de dois n√∫meros.
- Uma fun√ß√£o para validar um email.

üí° 

1. Declara√ß√£o de Fun√ß√£o (Function Declaration):
function somar(a, b) {
  return a + b;
}

console.log(somar(2, 3));  // Sa√≠da: 5

2. Express√£o de Fun√ß√£o (Function Expression):
const multiplicar = function(a, b) {
  return a * b;
};

console.log(multiplicar(4, 5));  // Sa√≠da: 20
‚Äã
3. Arrow Function (ES6):
const dividir = (a, b) => a / b;

console.log(dividir(10, 2));  // Sa√≠da: 5
‚Äã
üî•  Dica: Use arrow functions para simplificar c√≥digo curto e direto.



üìå  Par√¢metros e Retornos

Fun√ß√µes com Par√¢metros:
Par√¢metros s√£o como "ingredientes" que a fun√ß√£o precisa para funcionar.
function cumprimentar(nome) {
  return `Ol√°, ${nome}!`;
}

console.log(cumprimentar("Jo√£o"));  // Sa√≠da: Ol√°, Jo√£o!


üìå Fun√ß√µes Sem Retorno:

Nem todas as fun√ß√µes precisam retornar um valor.
function exibirMensagem(mensagem) {
  console.log(mensagem);
}

exibirMensagem("Bem-vindo ao curso!");  // Sa√≠da: Bem-vindo ao curso!
‚Äã

üìå Fun√ß√µes com Valor Padr√£o:

Voc√™ pode definir valores padr√£o para os par√¢metros.
function somar(a = 0, b = 0) {
  return a + b;
}

console.log(somar(5));  // Sa√≠da: 5 (b = 0 por padr√£o)


üî•üî• Fun√ß√µes de Alta Ordem üî•üî•

Fun√ß√µes de alta ordem s√£o aquelas que recebem outras fun√ß√µes como argumentos ou retornam fun√ß√µes.

function calcular(a, b, operacao) {
  return operacao(a, b);
}

const somar = (a, b) => a + b;
const multiplicar = (a, b) => a * b;

console.log(calcular(5, 3, somar));       // Sa√≠da: 8
console.log(calcular(5, 3, multiplicar)); // Sa√≠da: 15




================================
       üî•üî• Dica: üî•üî•
================================

- **Evite Repeti√ß√£o de C√≥digo:**
    
    Sempre que perceber que est√° repetindo c√≥digo, considere criar uma fun√ß√£o.
    
- **Nomeie Fun√ß√µes de Forma Clara:**
    
    O nome da fun√ß√£o deve indicar claramente o que ela faz.
    
    ```jsx
    function calcularMedia() {} // Claro
    function calc() {} // Pouco claro
    
    ```
    
- **Use Fun√ß√µes para Modularizar o C√≥digo:**
    
    Divida tarefas complexas em v√°rias fun√ß√µes menores e reutiliz√°veis.

*/


// 1. Crie uma fun√ß√£o que calcule o dobro de um n√∫mero.


function multiplicar(a, b) {
       return a * b;
};

console.log(multiplicar(3, 2));


function calcular(a, b, operacao) {
       return operacao(a, b);
}

const soma = (a, b) => a + b;
const mult = (a, b) => a * b;

console.log(calcular(2, 3, soma))
console.log(calcular(2, 3, mult))


// 2. Escreva uma fun√ß√£o que receba um nome e retorne uma mensagem de boas-vindas.

function saudacao(nome) {
       return `Bem vindo, ${nome}`;
};

console.log(saudacao("Zmax"));
console.log(saudacao("Pedro"));


// 3. Crie uma fun√ß√£o que receba dois n√∫meros e retorne o maior deles.

function maiorNum(a, b) {
       if (a > b) {
              return a
       } else {
              return b
       }
};

console.log(maiorNum(3, 6));


// 4. Implemente uma fun√ß√£o que calcule a m√©dia de tr√™s n√∫meros.

function media(a, b ,c) {
       return (a + b + c )/3
};

console.log(media(2 , 3 , 4))



// 5. Crie uma fun√ß√£o que receba um array de n√∫meros e retorne a soma deles.


function somaLista(lista) {
       // uma soma igual a zero
       let soma = 0
       // para um numero dentro de uma lista de numeros, pega o primeiro numero e soma com o pr√≥ximo e retorna a soma dos numeros da lista
       for (let numero of lista) {
              soma += numero;           
       }
       return soma;  
}

let lista = [1, 2, 3, 4, 5];

console.log(somaLista(lista));


// 6. Escreva uma fun√ß√£o que receba uma string e retorne o n√∫mero de caracteres dessa string.

function quantidadeCaracteres(palavra) {
       return palavra.length       
};

let palavra = "Zmax";
console.log(quantidadeCaracteres(palavra));