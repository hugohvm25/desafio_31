/*
=========================
        LOOPS 
=========================

Um **array** √© uma lista ordenada de valores que podem ser de qualquer tipo: n√∫meros, strings, objetos, ou at√© outros arrays.

üí° **Exemplo no mundo real:**

- Uma lista de tarefas.
- Nomes de participantes em um evento.

Como Criar Arrays no JavaScript
1. Arrays Simples:
let numeros = [1, 2, 3, 4, 5];
‚Äã
2. Arrays Mistos (diferentes tipos):
let misto = [42, "Texto", true, { chave: "valor" }];
‚Äã
3. Array Vazio:
let vazio = [];
‚Äã
üìå Dica: Voc√™ pode adicionar elementos ao array depois de cri√°-lo:
vazio.push("Novo Elemento");
console.log(vazio);  // Sa√≠da: ["Novo Elemento"]



M√©todos e Propriedades de Arrays

Os arrays v√™m com v√°rios m√©todos √∫teis para facilitar sua manipula√ß√£o. Aqui est√£o os mais importantes:
________________________________________________________________________________________________________
M√©todo    |             Descri√ß√£o             |              Exemplo        |        Resultado
push()    | Adiciona um elemento ao final     | frutas.push("Uva")          |  ["Ma√ß√£", "Banana", "Uva"]
pop()     | Remove o √∫ltimo elemento          | frutas.pop()                |  ["Ma√ß√£", "Banana"]
shift()   | Remove o primeiro elemento        | frutas.shift()              | ["Banana", "Laranja"]
unshift() | Adiciona um elemento no in√≠cio    | frutas.unshift("Morango")   | ["Morango", "Ma√ß√£"]
length    | Retorna o tamanho do array        | frutas.length               |       3
indexOf() | Retorna o √≠ndice de um valor      | frutas.indexOf("Banana")    |       1
slice()   | Retorna parte do array            | frutas.slice(1, 3)          | ["Banana", "Laranja"]
splice()  | Adiciona/Remove elementos         | frutas.splice(1, 1, "Uva")  | ["Ma√ß√£", "Uva", "Laranja"]
join()    | Junta os elementos em uma string  | frutas.join(", ")           | "Ma√ß√£, Banana, Laranja
________________________________________________________________________________________________________



================================
üî•üî• Dica: üî•üî•
================================

Acessar o √öltimo Elemento:

Use array[array.length - 1] para acessar o √∫ltimo elemento de um array.
let numeros = [5, 10, 15];
console.log(numeros[numeros.length - 1]);  // Sa√≠da: 15
‚Äã
Cuidado com √çndices Inv√°lidos:

Acessar um √≠ndice que n√£o existe retorna undefined:
let frutas = ["Ma√ß√£", "Banana"];
console.log(frutas[5]);  // Sa√≠da: undefined



*/


// 1. Crie um array com suas tr√™s cores favoritas e adicione uma nova cor no final.

let cores = ["azul", "amarelo", "vermelho"];

console.log(cores)

cores.push("verde")

console.log(cores)



// 2. Use um loop para exibir todos os itens de um array de compras.

let compras = ["caneta", "lapis", "caderno", "borracha"];

for (let i = 0; i <= compras.length; i++) {
        console.log(`Comprei ${compras[i]}`)
}



// 3. Dado um array de n√∫meros `[10, 20, 30, 40, 50]`, use o m√©todo `slice` para extrair os dois √∫ltimos n√∫meros.

let num = [10, 20, 30, 40, 50];

console.log(num.slice(0, 3))



// 4. Crie um array de tarefas e remova a primeira tarefa usando `shift`.

let tarefas = ["cozinhar", "lavar", "estudar"];

console.log(tarefas)

tarefas.shift()
console.log(tarefas)



// 5. Use `splice` para substituir o terceiro item de um array por "Substitu√≠do".

let troca = ["um", "dois", "tres", "quatro", "cinco"];

console.log(troca)
// var.splice(posi√ß√£o, quantidade, "dado que ir√° substituir")
troca.splice(2, 1, "subistituido");
console.log(troca)


  
 // 6. Transforme um array de palavras em uma frase completa usando `join`.

 let palavras = ["Eu", "gosto", "de", "programar"];

 console.log(palavras);
 console.log(palavras.join(" "));
 
